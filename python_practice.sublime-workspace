{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"n",
				"neighbor"
			],
			[
				"g",
				"get"
			],
			[
				"min",
				"min_len"
			],
			[
				"cur",
				"current_sum"
			],
			[
				"l",
				"left"
			],
			[
				"nu",
				"nums"
			],
			[
				"num",
				"num_idx_dict"
			],
			[
				"m",
				"max_sum"
			],
			[
				"max",
				"max_sum"
			],
			[
				"c",
				"current_sum"
			],
			[
				"ma",
				"max_sum"
			],
			[
				"cu",
				"current_sum"
			],
			[
				"min_",
				"min_len"
			],
			[
				"t",
				"target"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "def max_sum_subarray(nums, k):\n    n = len(nums)\n\n    if k <= 0 or n == 0:\n        raise ValueError(\"\")\n\n# --- Test Cases ---\nif __name__ == \"__main__\":\n    # Test 1: Example from docstring\n    nums = [2, 1, 5, 1, 3, 2]\n    k = 3\n    expected = 9\n    result = max_sum_subarray(nums, k)\n    print(f\"Test 1: {result} (Expected: {expected})\")\n    assert result == expected, f\"Test 1 Failed: Expected {expected}, got {result}\"\n\n    # Test 2: All negative numbers\n    nums = [-2, -1, -5, -1, -3, -2]\n    k = 2\n    expected = -3  # Corrected expected value\n    result = max_sum_subarray(nums, k)\n    print(f\"Test 2: {result} (Expected: {expected})\")\n    assert result == expected, f\"Test 2 Failed: Expected {expected}, got {result}\"\n\n    # Test 3: Window size equals array length\n    nums = [1, 2, 3, 4]\n    k = 4\n    expected = 10\n    result = max_sum_subarray(nums, k)\n    print(f\"Test 3: {result} (Expected: {expected})\")\n    assert result == expected, f\"Test 3 Failed: Expected {expected}, got {result}\"\n\n    # Test 4: Window size is 1\n    nums = [5, 3, 8, 1]\n    k = 1\n    expected = 8\n    result = max_sum_subarray(nums, k)\n    print(f\"Test 4: {result} (Expected: {expected})\")\n    assert result == expected, f\"Test 4 Failed: Expected {expected}, got {result}\"\n\n    # Test 5: Invalid k (should raise ValueError)\n    try:\n        max_sum_subarray([1, 2, 3], 0)\n    except ValueError as e:\n        print(f\"Test 5: Passed (Caught expected error: {e})\")\n    else:\n        assert False, \"Test 5: Failed (Did not catch expected error)\"\n\n",
			"file": "templates/sliding_window_fixed_question.py",
			"file_size": 1467,
			"file_write_time": 134022892554919485,
			"settings":
			{
				"buffer_size": 1531,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAACMAAAAAAAAAJAAAAAAAAAAEAAAAcGFzcw",
					"AQAAAAAAAAABAAAAIwAAAAAAAAAnAAAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAACQAAAAAAAAAJQAAAAAAAAAAAAAAJQAAAAAAAAAmAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJAAAAAAAAAAkAAAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": " l"
					},
					"AgAAACYAAAAAAAAAJwAAAAAAAAAAAAAAJwAAAAAAAAAoAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJgAAAAAAAAAmAAAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"insert_completion",
					{
						"completion": "len",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "len"
					},
					"AgAAACcAAAAAAAAAJwAAAAAAAAABAAAAbCcAAAAAAAAAKgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKAAAAAAAAAAoAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAACoAAAAAAAAALAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKgAAAAAAAAAqAAAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAACsAAAAAAAAALAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKwAAAAAAAAArAAAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert_completion",
					{
						"completion": "nums",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "nums"
					},
					"AgAAACsAAAAAAAAAKwAAAAAAAAABAAAAbisAAAAAAAAALwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALAAAAAAAAAAsAAAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AwAAADAAAAAAAAAANQAAAAAAAAAAAAAANQAAAAAAAAA6AAAAAAAAAAAAAAAxAAAAAAAAADEAAAAAAAAABAAAACAgICA",
					"AQAAAAAAAAABAAAAMAAAAAAAAAAwAAAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AgAAADYAAAAAAAAANwAAAAAAAAAAAAAANwAAAAAAAAA4AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANgAAAAAAAAA2AAAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADgAAAAAAAAAOQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOAAAAAAAAAA4AAAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "k"
					},
					"AQAAADkAAAAAAAAAOgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOQAAAAAAAAA5AAAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADoAAAAAAAAAOwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOgAAAAAAAAA6AAAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "<="
					},
					"AgAAADsAAAAAAAAAPAAAAAAAAAAAAAAAPAAAAAAAAAA9AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOwAAAAAAAAA7AAAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": " 0"
					},
					"AgAAAD0AAAAAAAAAPgAAAAAAAAAAAAAAPgAAAAAAAAA/AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPQAAAAAAAAA9AAAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": " or"
					},
					"AwAAAD8AAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAABBAAAAAAAAAAAAAABBAAAAAAAAAEIAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPwAAAAAAAAA/AAAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": " n"
					},
					"AgAAAEIAAAAAAAAAQwAAAAAAAAAAAAAAQwAAAAAAAABEAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQgAAAAAAAABCAAAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": " =="
					},
					"AwAAAEQAAAAAAAAARQAAAAAAAAAAAAAARQAAAAAAAABGAAAAAAAAAAAAAABGAAAAAAAAAEcAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARAAAAAAAAABEAAAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEcAAAAAAAAASAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARwAAAAAAAABHAAAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "0:"
					},
					"AgAAAEgAAAAAAAAASQAAAAAAAAAAAAAASQAAAAAAAABKAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASAAAAAAAAABIAAAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "\nraise"
					},
					"BgAAAEoAAAAAAAAAUwAAAAAAAAAAAAAAUwAAAAAAAABUAAAAAAAAAAAAAABUAAAAAAAAAFUAAAAAAAAAAAAAAFUAAAAAAAAAVgAAAAAAAAAAAAAAVgAAAAAAAABXAAAAAAAAAAAAAABXAAAAAAAAAFgAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASgAAAAAAAABKAAAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFgAAAAAAAAAWQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWAAAAAAAAABYAAAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert_completion",
					{
						"completion": "ValueError",
						"format": "text",
						"keep_prefix": false,
						"must_insert": true,
						"trigger": "ValueError"
					},
					"AQAAAFkAAAAAAAAAYwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWQAAAAAAAABZAAAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAGMAAAAAAAAAZQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYwAAAAAAAABjAAAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAGQAAAAAAAAAZgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZAAAAAAAAABkAAAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"termin",
				"Terminus: Open Default Shell in Panel"
			],
			[
				"ter",
				"Terminus: Open Default Shell in Panel"
			],
			[
				"open ter",
				"Terminus: Open Default Shell in Panel"
			],
			[
				"open ",
				"Terminus: Open Default Shell in Panel"
			],
			[
				"Ter",
				"Terminus: Open Default Shell in Panel"
			],
			[
				"Install Pa",
				"Package Control: Install Package"
			],
			[
				"Install P",
				"Package Control: Install Package"
			],
			[
				"",
				"Set Syntax: Plain Text"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 56.0,
		"history":
		[
			"help",
			"clear"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/carlosmariscal/Repositories/python-practice",
		"/Users/carlosmariscal/Repositories/python-practice/templates"
	],
	"file_history":
	[
		"/Users/carlosmariscal/Repositories/python-practice/templates/two_pointers_question.py",
		"/Users/carlosmariscal/Repositories/python-practice/templates/sliding_window_dynamic_min_question.py",
		"/Users/carlosmariscal/Repositories/python-practice/templates/sliding_window_dynamic_max_question.py",
		"/Users/carlosmariscal/Repositories/python-practice/templates/sliding_window_dynamic_min_answer.py",
		"/Users/carlosmariscal/Repositories/python-practice/templates/sliding_window_fixed_question.py",
		"/Users/carlosmariscal/Repositories/python-practice/templates/breadth_first_search_question.py",
		"/Users/carlosmariscal/Repositories/python-practice/templates/depth_first_search_question.py",
		"/Users/carlosmariscal/Repositories/python-practice/templates/depth_first_search_answer.py",
		"/Users/carlosmariscal/Repositories/python-practice/templates/breadth_first_search_answer.py",
		"/Users/carlosmariscal/Repositories/python-practice/templates/__init__.py",
		"/Users/carlosmariscal/Repositories/python-practice/templates/utils/__init__.py",
		"/Users/carlosmariscal/Repositories/python-practice/templates/binary_search_answer.py",
		"/Users/carlosmariscal/Repositories/python-practice/templates/binary_search_question.py",
		"/Users/carlosmariscal/Repositories/python-practice/templates/find_middle_value_answer.py",
		"/Users/carlosmariscal/Repositories/python-practice/templates/find_middle_value_question.py",
		"/Users/carlosmariscal/Repositories/python-practice/templates/invert_binary_tree_answer.py",
		"/Users/carlosmariscal/Repositories/python-practice/templates/invert_binary_tree_question.py",
		"/Users/carlosmariscal/Repositories/python-practice/templates/linked_list_reversal_answer.py",
		"/Users/carlosmariscal/Repositories/python-practice/templates/linked_list_reversal_question.py",
		"/Users/carlosmariscal/Repositories/python-practice/templates/pair_sum_unsorted_answer.py",
		"/Users/carlosmariscal/Repositories/python-practice/templates/pair_sum_unsorted_question.py",
		"/Users/carlosmariscal/Repositories/python-practice/templates/sliding_window_dynamic_max_answer.py",
		"/Users/carlosmariscal/Repositories/python-practice/templates/sliding_window_fixed_answer.py",
		"/Users/carlosmariscal/Repositories/python-practice/templates/two_pointers_answer.py",
		"/Users/carlosmariscal/Repositories/python-practice/templates/sliding_window_dynamic_answer.py",
		"/Users/carlosmariscal/Repositories/python-practice/templates/sliding_window_dynamic_question.py",
		"/Users/carlosmariscal/Repositories/python-practice/templates/sliding_window_answer.py",
		"/Users/carlosmariscal/Repositories/python-practice/templates/sliding_window_question.py",
		"/Users/carlosmariscal/Repositories/python-practice/sorting/quick_sort_answer.py",
		"/Users/carlosmariscal/Repositories/python-practice/linked_lists/linked_list_reversal_question.py",
		"/Users/carlosmariscal/Repositories/python-practice/linked_lists/find_middle_value_answer.py",
		"/Users/carlosmariscal/Repositories/python-practice/hash_maps_and_sets/unique_occurrences_question.py",
		"/Users/carlosmariscal/Repositories/python-practice/hash_maps_and_sets/pair_sum_unsorted_question.py",
		"/Users/carlosmariscal/Repositories/python-practice/binary_trees/invert_binary_tree_question.py",
		"/Users/carlosmariscal/Repositories/python-practice/hash_maps_and_sets/pair_sum_unsorted_answer.py",
		"/Users/carlosmariscal/Repositories/python-practice/two_pointers/binary_search/binary_search_question.py",
		"/Users/carlosmariscal/Repositories/python-practice/binary_trees/invert_binary_tree_answer.py",
		"/Users/carlosmariscal/Repositories/python-practice/sorting/bubble_sort_answer.py",
		"/Users/carlosmariscal/Repositories/python-practice/sorting/insertion_sort_question.py",
		"/Users/carlosmariscal/Repositories/python-practice/patterns/sliding_window_answer.py"
	],
	"find":
	{
		"height": 65.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"\n"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "templates/sliding_window_fixed_question.py",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1531,
						"regions":
						{
						},
						"selection":
						[
							[
								727,
								727
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 53.0
	},
	"input":
	{
		"height": 43.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.Terminus":
	{
		"height": 286.0,
		"history":
		[
		]
	},
	"output.Terminus 2":
	{
		"height": 362.0,
		"history":
		[
		]
	},
	"output.Terminus 3":
	{
		"height": 287.0,
		"history":
		[
		]
	},
	"output.Terminus 4":
	{
		"height": 216.0,
		"history":
		[
		]
	},
	"output.Terminus 5":
	{
		"height": 154.0,
		"history":
		[
		]
	},
	"output.Terminus 6":
	{
		"height": 302.0,
		"history":
		[
		]
	},
	"output.Terminus 7":
	{
		"height": 347.0,
		"history":
		[
		]
	},
	"output.find_results":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"pinned_build_system": "",
	"project": "python_practice.sublime-project",
	"replace":
	{
		"height": 102.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 485.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
